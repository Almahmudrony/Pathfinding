OPEN //the set of nodes to be evaluated
CLOSED //the set of nodes already evaluated
add the start node to OPEN
 
loop
        current = node in OPEN with the lowest f_cost
        remove current from OPEN
        add current to CLOSED
 
        if current is the target node //path has been found
                return
 
        foreach neighbour of the current node
                if neighbour is not traversable or neighbour is in CLOSED
                        skip to the next neighbour
                //newPathCost = curr_node.gcost + distance(curr_node, neighbor_node);
                if newPathCost < neighbour.gcost OR neighbour is not in OPEN
                        set gcost of neighbour to newPathCost
                        set hcost of neighbour to distance(curr_node, target_node)
                        set parent of neighbour to current
                        if neighbour is not in OPEN
                                add neighbour to OPEN
